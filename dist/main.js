/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ZettelLinkPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  idFormat: "timestamp",
  appendId: false,
  fleetingTemplate: `---
id: {{ID}}
zettel_type: fleeting
---

# Quick thought on {{DATE}}

- {{TIME}} [[ ]]`,
  literatureTemplate: `---
id: {{ID}}
zettel_type: literature
source: "" # e.g., "S\xF6nke Ahrens - How to Take Smart Notes"
page: "" # e.g., "p. 42"
keywords: [] # e.g., "Zettelkasten, Note-taking"
---

# From Source: [[Placeholder Title]]

**Summary (in my own words):**


**Key Points:**
-

**Connections/Thoughts:**
- [[ ]]`,
  permanentTemplate: `---
id: {{ID}}
zettel_type: permanent
---

# My Zettel Title

This is my single, atomic idea, written in my own words.

---
**Connections:**
- [[ ]] # Link to existing Zettels, literature notes, or fleeting notes
- [[ ]]

**Source (if applicable):** [[Placeholder Source Title]]`,
  enableOrphanedPane: true,
  ignoreFrontmatter: "zettel_ignore",
  showRibbonIcon: true
};
var ZettelLinkPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    if (this.settings.showRibbonIcon) {
      const ribbonIconEl = this.addRibbonIcon("file-plus", "Create new Zettel", (evt) => {
        this.createNewZettel();
      });
      ribbonIconEl.addClass("zettellink-ribbon-class");
    }
    this.addCommand({
      id: "create-new-zettel",
      name: "Create new Zettel",
      callback: () => {
        this.createNewZettel();
      }
    });
    this.addCommand({
      id: "open-orphaned-notes-view",
      name: "Open Orphaned Notes view",
      callback: () => {
        this.activateOrphanedNotesView();
      }
    });
    this.registerView(
      ORPHANED_NOTES_VIEW_TYPE,
      (leaf) => new OrphanedNotesView(leaf, this)
    );
    this.addSettingTab(new ZettelLinkSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  createNewZettel() {
    new ZettelTemplateModal(this.app, this).open();
  }
  async activateOrphanedNotesView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(ORPHANED_NOTES_VIEW_TYPE);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      await leaf.setViewState({ type: ORPHANED_NOTES_VIEW_TYPE, active: true });
    }
    workspace.revealLeaf(leaf);
  }
  generateId() {
    if (this.settings.idFormat === "timestamp") {
      const now = new Date();
      return now.getFullYear().toString() + String(now.getMonth() + 1).padStart(2, "0") + String(now.getDate()).padStart(2, "0") + String(now.getHours()).padStart(2, "0") + String(now.getMinutes()).padStart(2, "0") + String(now.getSeconds()).padStart(2, "0");
    } else {
      return "xxxx-xxxx-4xxx-yxxx".replace(/[xy]/g, function(c) {
        const r = Math.random() * 16 | 0;
        const v = c == "x" ? r : r & 3 | 8;
        return v.toString(16);
      });
    }
  }
  async createZettelFromTemplate(templateType) {
    const id = this.generateId();
    const now = new Date();
    const date = now.toISOString().split("T")[0];
    const time = now.toTimeString().split(" ")[0];
    let template = "";
    switch (templateType) {
      case "fleeting":
        template = this.settings.fleetingTemplate;
        break;
      case "literature":
        template = this.settings.literatureTemplate;
        break;
      case "permanent":
        template = this.settings.permanentTemplate;
        break;
    }
    template = template.replace(/\{\{ID\}\}/g, id).replace(/\{\{DATE\}\}/g, date).replace(/\{\{TIME\}\}/g, time);
    const filename = this.settings.appendId ? `Enter your Zettel title here-${id}.md` : `${id}-Enter your Zettel title here.md`;
    try {
      const file = await this.app.vault.create(filename, template);
      const leaf = this.app.workspace.getUnpinnedLeaf();
      await leaf.openFile(file);
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (view) {
        const editor = view.editor;
        const content = editor.getValue();
        const titleMatch = content.match(/# (.+)/);
        if (titleMatch) {
          const titleLine = content.split("\n").findIndex((line) => line.includes(titleMatch[1]));
          if (titleLine !== -1) {
            editor.setSelection(
              { line: titleLine, ch: 2 },
              { line: titleLine, ch: 2 + titleMatch[1].length }
            );
          }
        }
      }
    } catch (error) {
      new import_obsidian.Notice("Error creating Zettel: " + error.message);
    }
  }
};
var ZettelTemplateModal = class extends import_obsidian.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Create new Zettel" });
    const buttonContainer = contentEl.createDiv({ cls: "zettel-template-buttons" });
    const fleetingBtn = buttonContainer.createEl("button", {
      text: "Fleeting Note (Quick Capture)",
      cls: "mod-cta zettel-template-btn"
    });
    fleetingBtn.onclick = () => {
      this.plugin.createZettelFromTemplate("fleeting");
      this.close();
    };
    const literatureBtn = buttonContainer.createEl("button", {
      text: "Literature Note (From Source)",
      cls: "mod-cta zettel-template-btn"
    });
    literatureBtn.onclick = () => {
      this.plugin.createZettelFromTemplate("literature");
      this.close();
    };
    const permanentBtn = buttonContainer.createEl("button", {
      text: "Permanent Note (Zettel)",
      cls: "mod-cta zettel-template-btn"
    });
    permanentBtn.onclick = () => {
      this.plugin.createZettelFromTemplate("permanent");
      this.close();
    };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var ORPHANED_NOTES_VIEW_TYPE = "orphaned-notes-view";
var OrphanedNotesView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return ORPHANED_NOTES_VIEW_TYPE;
  }
  getDisplayText() {
    return "Orphaned Notes";
  }
  getIcon() {
    return "unlink";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const headerDiv = container.createEl("div", { cls: "nav-header" });
    headerDiv.createEl("h4", { text: "ZettelLink: Orphaned Notes" });
    this.refreshButton = headerDiv.createEl("button", {
      text: "\u21BB",
      cls: "clickable-icon nav-action-button",
      attr: { title: "Refresh orphaned notes" }
    });
    this.refreshButton.onclick = () => this.refresh();
    await this.refresh();
  }
  async refresh() {
    const container = this.containerEl.children[1];
    const listContainer = container.querySelector(".orphaned-notes-list") || container.createEl("div", { cls: "orphaned-notes-list" });
    listContainer.empty();
    const orphanedNotes = await this.findOrphanedNotes();
    if (orphanedNotes.length === 0) {
      listContainer.createEl("div", {
        text: "No orphaned notes found! \u{1F389}",
        cls: "orphaned-notes-empty"
      });
      return;
    }
    orphanedNotes.forEach((note) => {
      const noteItem = listContainer.createEl("div", { cls: "orphaned-note-item" });
      const noteTitle = noteItem.createEl("div", {
        text: note.basename,
        cls: "orphaned-note-title clickable"
      });
      noteTitle.onclick = () => {
        this.app.workspace.openLinkText(note.basename, "");
      };
      const actionsDiv = noteItem.createEl("div", { cls: "orphaned-note-actions" });
      const linkButton = actionsDiv.createEl("button", {
        text: "Link",
        cls: "mod-cta orphaned-note-btn"
      });
      linkButton.onclick = () => this.linkNote(note);
      noteItem.oncontextmenu = (e) => {
        const menu = new import_obsidian.Menu();
        menu.addItem((item) => {
          item.setTitle("Open Note").setIcon("file-text").onClick(() => {
            this.app.workspace.openLinkText(note.basename, "");
          });
        });
        menu.addItem((item) => {
          item.setTitle("Link Note").setIcon("link").onClick(() => {
            this.linkNote(note);
          });
        });
        menu.addItem((item) => {
          item.setTitle("Ignore").setIcon("eye-off").onClick(() => {
            this.ignoreNote(note);
          });
        });
        menu.showAtMouseEvent(e);
      };
    });
  }
  async findOrphanedNotes() {
    const files = this.app.vault.getMarkdownFiles();
    const orphanedNotes = [];
    for (const file of files) {
      const cache = this.app.metadataCache.getFileCache(file);
      if ((cache == null ? void 0 : cache.frontmatter) && cache.frontmatter[this.plugin.settings.ignoreFrontmatter]) {
        continue;
      }
      const resolvedLinks = this.app.metadataCache.resolvedLinks;
      let hasIncomingLinks = false;
      for (const [sourcePath, links] of Object.entries(resolvedLinks)) {
        if (links[file.path]) {
          hasIncomingLinks = true;
          break;
        }
      }
      if (!hasIncomingLinks) {
        orphanedNotes.push(file);
      }
    }
    return orphanedNotes;
  }
  async linkNote(file) {
    try {
      const content = await this.app.vault.read(file);
      const linkPrompt = `

---
**Review for Connections:**
- [[ ]] # Add links to related Zettels here
`;
      if (!content.includes("**Review for Connections:**")) {
        await this.app.vault.modify(file, content + linkPrompt);
      }
      const leaf = this.app.workspace.getUnpinnedLeaf();
      await leaf.openFile(file);
      setTimeout(() => {
        const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (view) {
          const editor = view.editor;
          const newContent = editor.getValue();
          const linkIndex = newContent.lastIndexOf("[[ ]]");
          if (linkIndex !== -1) {
            const pos = editor.offsetToPos(linkIndex + 3);
            editor.setCursor(pos);
          }
        }
      }, 100);
    } catch (error) {
      new import_obsidian.Notice("Error linking note: " + error.message);
    }
  }
  async ignoreNote(file) {
    try {
      const content = await this.app.vault.read(file);
      const frontmatterRegex = /^---\n([\s\S]*?)\n---/;
      const match = content.match(frontmatterRegex);
      let newContent = "";
      if (match) {
        const frontmatter = match[1];
        const newFrontmatter = frontmatter + `
${this.plugin.settings.ignoreFrontmatter}: true`;
        newContent = content.replace(frontmatterRegex, `---
${newFrontmatter}
---`);
      } else {
        const newFrontmatter = `---
${this.plugin.settings.ignoreFrontmatter}: true
---

`;
        newContent = newFrontmatter + content;
      }
      await this.app.vault.modify(file, newContent);
      await this.refresh();
      new import_obsidian.Notice("Note ignored successfully");
    } catch (error) {
      new import_obsidian.Notice("Error ignoring note: " + error.message);
    }
  }
  async onClose() {
  }
};
var ZettelLinkSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "ZettelLink Settings" });
    new import_obsidian.Setting(containerEl).setName("Zettel ID Format").setDesc("Choose the format for Zettel IDs").addDropdown((dropdown) => dropdown.addOption("timestamp", "YYYYMMDDHHMMSS").addOption("uuid", "UUID").setValue(this.plugin.settings.idFormat).onChange(async (value) => {
      this.plugin.settings.idFormat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Append ID to filename").setDesc("If enabled, ID will be appended (title-ID.md). If disabled, ID will be prepended (ID-title.md)").addToggle((toggle) => toggle.setValue(this.plugin.settings.appendId).onChange(async (value) => {
      this.plugin.settings.appendId = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Show Ribbon Icon").setDesc("Show the ZettelLink icon in the ribbon").addToggle((toggle) => toggle.setValue(this.plugin.settings.showRibbonIcon).onChange(async (value) => {
      this.plugin.settings.showRibbonIcon = value;
      await this.plugin.saveSettings();
      new import_obsidian.Notice("Please restart Obsidian for this change to take effect");
    }));
    new import_obsidian.Setting(containerEl).setName("Enable Orphaned Notes Pane").setDesc("Enable the orphaned notes detection pane").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableOrphanedPane).onChange(async (value) => {
      this.plugin.settings.enableOrphanedPane = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Ignore Frontmatter Field").setDesc('Frontmatter field name to ignore notes from orphaned detection (e.g., "zettel_ignore")').addText((text) => text.setPlaceholder("zettel_ignore").setValue(this.plugin.settings.ignoreFrontmatter).onChange(async (value) => {
      this.plugin.settings.ignoreFrontmatter = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "Template Settings" });
    new import_obsidian.Setting(containerEl).setName("Fleeting Note Template").setDesc("Template for fleeting notes").addTextArea((text) => text.setPlaceholder("Enter your fleeting note template...").setValue(this.plugin.settings.fleetingTemplate).onChange(async (value) => {
      this.plugin.settings.fleetingTemplate = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Literature Note Template").setDesc("Template for literature notes").addTextArea((text) => text.setPlaceholder("Enter your literature note template...").setValue(this.plugin.settings.literatureTemplate).onChange(async (value) => {
      this.plugin.settings.literatureTemplate = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Permanent Note Template").setDesc("Template for permanent notes (Zettels)").addTextArea((text) => text.setPlaceholder("Enter your permanent note template...").setValue(this.plugin.settings.permanentTemplate).onChange(async (value) => {
      this.plugin.settings.permanentTemplate = value;
      await this.plugin.saveSettings();
    }));
    containerEl.querySelectorAll("textarea").forEach((textarea) => {
      textarea.rows = 10;
      textarea.style.fontFamily = "monospace";
    });
  }
};
